import numpy as np
import cvxpy as cp
from functions import Kernel

max_degree = 2
kernel = Kernel(*[0.0, 0.0], degree = max_degree)
p = kernel.kernel_dim
N_list = kernel.get_N_matrices()
r = len(N_list)

P = np.random.rand(p,p)
P = P @ P.T
Q = np.random.rand(p,p)
Q = Q @ Q.T

gradCm_var = cp.Variable(p)
gradCkappa_var = cp.Variable(r)

gradCm_param = cp.Parameter(p)
gradCkappa_param = cp.Parameter(r)
m = cp.Parameter(p)
kappa = cp.Parameter(r)
delta = cp.Parameter()

c = 1
objective = cp.Minimize( cp.norm( gradCm_var - gradCm_param) + cp.norm( gradCkappa_var - gradCkappa_param) )
constraint = [ c * ( (delta**2)*gradCm_var.T @ P @ gradCm_var - 2*delta*m.T @ P @ gradCm_var + m.T @ P @ m ) * P
               + cp.sum([ kappa[k] * (N_list[k] + N_list[k].T) for k in range(r) ])
         - delta*cp.sum([ gradCkappa_var[k] * (N_list[k] + N_list[k].T) for k in range(r) ]) >> 0 ]
problem = cp.Problem(objective, constraint)

gradCm_param.value = np.random.rand(p)
gradCkappa_param.value = np.random.rand(r)
m.value = np.random.rand(p)
kappa.value = np.random.rand(r)
delta.value = np.random.rand()

problem.solve()
print("Problem status: " + problem.status)